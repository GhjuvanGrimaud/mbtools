jobs:
  - job: 'Linux'
    timeoutInMinutes: 120
    variables:
      CRAN: 'https://demo.rstudiopm.com/all/__linux__/bionic/latest'
      R_LIBS_USER: '$(Agent.BuildDirectory)/R/library'
      TZ: UTC
      CI: true
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        R-4.0:
          containerImage: rstudio/r-base:4.0-focal
    container: $[ variables['containerImage'] ]
    steps:
      - bash: |
          sudo apt-get update
          sudo apt-get install -y libxml2-dev libssl-dev git bzip2 \
            cmake autoconf automake make gcc perl zlib1g-dev libbz2-dev \
            liblzma-dev libcurl4-gnutls-dev libssl-dev libncurses5-dev \
            libglpk-dev samtools
        displayName: "Install System Dependencies"
      - bash: |
          echo 'options(repos = "$(CRAN)", Ncpus = 2, crayon.enabled = TRUE)' > ~/.Rprofile
          mkdir -p $(R_LIBS_USER)
        displayName: "Setting up R library"
      - bash: |
          rm -rf vignettes
          curl -L https://github.com/lh3/minimap2/releases/download/v2.13/minimap2-2.13_x64-linux.tar.bz2 | tar -jxf -
          sudo cp ./minimap2-2.13_x64-linux/minimap2 /usr/bin/ && rm -rf ./minimap2-*
          git clone --recursive https://github.com/seqan/slimm
          (cd slimm && mkdir build && cd build && cmake .. && make && sudo cp bin/slimm /usr/bin/)
          rm -rf slimm
        displayName: "Install tools"
      - task: Cache@2
        inputs:
          key: ./DESCRIPTION | "$(Agent.JobName)"
          path: $(R_LIBS_USER)
        displayName: 'R library cache'
      - bash: |
          Rscript -e "install.packages(c('remotes', 'rcmdcheck', 'BiocManager', 'rmarkdown', 'stringi'))"
          Rscript -e "remotes::install_deps(dependencies = TRUE)"
        displayName: "Install dependencies"
      - bash: |
          Rscript -e "rcmdcheck::rcmdcheck(args = '--no-manual', build_args = '--no-build-vignettes', error_on = 'warning', check_dir = 'check')"
        displayName: 'Check package'
      - task: PublishTestResults@1
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'check/*.Rcheck/tests/test-*.xml'
          testRunTitle: $(Agent.JobName)
        condition: succeededOrFailed()
      - bash: |
          Rscript -e "cov <- covr::azure()"
        displayName: 'Run code coverage'
      - script: |
          bash <(curl -s https://codecov.io/bash)
        displayName: 'Upload to codecov.io'
      - publish: check
        artifact: $(Build.BuildNumber)-$(Agent.JobName)-check_results
        condition: succeededOrFailed()
